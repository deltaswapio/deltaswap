import {
  init,
  getOperatingChains,
  getWormholeRelayer,
  ChainInfo,
} from "../helpers/env";
import { buildOverrides } from "../helpers/deployments";

import { extractChainToBeRegisteredFromRegisterChainVaa } from "../helpers/vaa";

import { inspect } from "util";

interface RegisterChainDescriptor {
  vaa: Buffer;
  chainToRegister: number;
}

const processName = "registerWormholeRelayer";
init();
const chains = getOperatingChains();

const zeroBytes32 =
  "0x0000000000000000000000000000000000000000000000000000000000000000";

/**
 * These are the registration VAAs for mainnet.
 */
const base64RegistrationVaas = [
  "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",
];

async function run() {
  console.log(`Start! ${processName}`);

  const registrationVaas = base64RegistrationVaas.map((vaa) => {
    const vaaBuf = Buffer.from(vaa, "base64");
    return {
      vaa: vaaBuf,
      chainToRegister: extractChainToBeRegisteredFromRegisterChainVaa(vaaBuf),
    };
  });
  const tasks = await Promise.allSettled(
    chains.map((chain) => register(chain, registrationVaas)),
  );

  for (const task of tasks) {
    if (task.status === "rejected") {
      console.error(`Register failed: ${inspect(task.reason)}`);
    } else {
      console.log(`Register succeeded for chain ${task.value}`);
    }
  }
}

async function register(
  chain: ChainInfo,
  registrationVaas: RegisterChainDescriptor[],
) {
  console.log(`Registering WormholeRelayers in chain ${chain.chainId}...`);
  const wormholeRelayer = await getWormholeRelayer(chain);

  // TODO: check for already registered VAAs
  for (const { vaa, chainToRegister } of registrationVaas) {
    const registrationAddress =
      await wormholeRelayer.getRegisteredWormholeRelayerContract(
        chainToRegister,
      );
    if (registrationAddress !== zeroBytes32) {
      // We skip chains that are already registered.
      // Note that reregistrations aren't allowed.
      continue;
    }

    const overrides = await buildOverrides(
      () => wormholeRelayer.estimateGas.registerWormholeRelayerContract(vaa),
      chain,
    );
    const tx = await wormholeRelayer.registerWormholeRelayerContract(
      vaa,
      overrides,
    );
    const receipt = await tx.wait();

    if (receipt.status !== 1) {
      throw new Error(
        `Failed registration for chain ${chain.chainId}, tx ${tx.hash}`,
      );
    }
  }

  return chain.chainId;
}

run().then(() => console.log("Done! " + processName));
